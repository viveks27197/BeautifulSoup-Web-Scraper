,function name,function use
0,random.seed,"Initialize the random number generator.If a is omitted or None, the current system time is used.  Ifrandomness sources are provided by the operating system, they are usedinstead of the system time (see the os.urandom() function for detailson availability).If a is an int, it is used directly.With version 2 (the default), a str, bytes, or bytearrayobject gets converted to an int and all of its bits are used.With version 1 (provided for reproducing random sequences from older versionsof Python), the algorithm for str and bytes generates anarrower range of seeds.Changed in version 3.2: Moved to the version 2 scheme which uses all of the bits in a string seed.Changed in version 3.11: The seed must be one of the following types:NoneType, int, float, str,bytes, or bytearray."
1,random.getstate,Return an object capturing the current internal state of the generator.  Thisobject can be passed to setstate() to restore the state.
2,random.setstate,"state should have been obtained from a previous call to getstate(), andsetstate() restores the internal state of the generator to what it was atthe time getstate() was called."
3,random.randbytes,Generate n random bytes.This method should not be used for generating security tokens.Use secrets.token_bytes() instead.New in version 3.9.
4,random.randrange,"Return a randomly selected element from range(start, stop, step).  This isequivalent to choice(range(start, stop, step)), but doesn’t actually build arange object.The positional argument pattern matches that of range().  Keyword argumentsshould not be used because the function may use them in unexpected ways.Changed in version 3.2: randrange() is more sophisticated about producing equally distributedvalues.  Formerly it used a style like int(random()*n) which could produceslightly uneven distributions.Deprecated since version 3.10: The automatic conversion of non-integer types to equivalent integers isdeprecated.  Currently randrange(10.0) is losslessly converted torandrange(10).  In the future, this will raise a TypeError.Deprecated since version 3.10: The exception raised for non-integral values such as randrange(10.5)or randrange('10') will be changed from ValueError toTypeError."
5,random.randint,"Return a random integer N such that a <= N <= b.  Alias forrandrange(a, b+1)."
6,random.getrandbits,"Returns a non-negative Python integer with k random bits. This methodis supplied with the MersenneTwister generator and some other generatorsmay also provide it as an optional part of the API. When available,getrandbits() enables randrange() to handle arbitrarily largeranges.Changed in version 3.9: This method now accepts zero for k."
7,random.choice,"Return a random element from the non-empty sequence seq. If seq is empty,raises IndexError."
8,random.choices,"Return a k sized list of elements chosen from the population with replacement.If the population is empty, raises IndexError.If a weights sequence is specified, selections are made according to therelative weights.  Alternatively, if a cum_weights sequence is given, theselections are made according to the cumulative weights (perhaps computedusing itertools.accumulate()).  For example, the relative weights[10, 5, 30, 5] are equivalent to the cumulative weights[10, 15, 45, 50].  Internally, the relative weights are converted tocumulative weights before making selections, so supplying the cumulativeweights saves work.If neither weights nor cum_weights are specified, selections are madewith equal probability.  If a weights sequence is supplied, it must bethe same length as the population sequence.  It is a TypeErrorto specify both weights and cum_weights.The weights or cum_weights can use any numeric type that interoperateswith the float values returned by random() (that includesintegers, floats, and fractions but excludes decimals).  Weights are assumedto be non-negative and finite.  A ValueError is raised if allweights are zero.For a given seed, the choices() function with equal weightingtypically produces a different sequence than repeated calls tochoice().  The algorithm used by choices() uses floatingpoint arithmetic for internal consistency and speed.  The algorithm usedby choice() defaults to integer arithmetic with repeated selectionsto avoid small biases from round-off error.New in version 3.6.Changed in version 3.9: Raises a ValueError if all weights are zero."
9,random.shuffle,"Shuffle the sequence x in place.To shuffle an immutable sequence and return a new shuffled list, usesample(x, k=len(x)) instead.Note that even for small len(x), the total number of permutations of xcan quickly grow larger than the period of most random number generators.This implies that most permutations of a long sequence can never begenerated.  For example, a sequence of length 2080 is the largest thatcan fit within the period of the Mersenne Twister random number generator.Deprecated since version 3.9, removed in version 3.11: The optional parameter random."
10,random.sample,"Return a k length list of unique elements chosen from the populationsequence.  Used for random sampling without replacement.Returns a new list containing elements from the population while leaving theoriginal population unchanged.  The resulting list is in selection order so thatall sub-slices will also be valid random samples.  This allows raffle winners(the sample) to be partitioned into grand prize and second place winners (thesubslices).Members of the population need not be hashable or unique.  If the populationcontains repeats, then each occurrence is a possible selection in the sample.Repeated elements can be specified one at a time or with the optionalkeyword-only counts parameter.  For example, sample(['red', 'blue'],counts=[4, 2], k=5) is equivalent to sample(['red', 'red', 'red', 'red','blue', 'blue'], k=5).To choose a sample from a range of integers, use a range() object as anargument.  This is especially fast and space efficient for sampling from a largepopulation:  sample(range(10000000), k=60).If the sample size is larger than the population size, a ValueErroris raised.Changed in version 3.9: Added the counts parameter.Changed in version 3.11: The population must be a sequence.  Automatic conversion of setsto lists is no longer supported."
11,random.random,Return the next random floating point number in the range 0.0 <= X < 1.0
12,random.uniform,Return a random floating point number N such that a <= N <= b fora <= b and b <= N <= a for b < a.The end-point value b may or may not be included in the rangedepending on floating-point rounding in the equation a + (b-a) * random().
13,random.triangular,"Return a random floating point number N such that low <= N <= high andwith the specified mode between those bounds.  The low and high boundsdefault to zero and one.  The mode argument defaults to the midpointbetween the bounds, giving a symmetric distribution."
14,random.betavariate,Beta distribution.  Conditions on the parameters are alpha > 0 andbeta > 0. Returned values range between 0 and 1.
15,random.expovariate,"Exponential distribution.  lambd is 1.0 divided by the desiredmean.  It should be nonzero.  (The parameter would be called“lambda”, but that is a reserved word in Python.)  Returned valuesrange from 0 to positive infinity if lambd is positive, and fromnegative infinity to 0 if lambd is negative."
16,random.gammavariate,Gamma distribution.  (Not the gamma function!)  Conditions on theparameters are alpha > 0 and beta > 0.The probability distribution function is:          x ** (alpha - 1) * math.exp(-x / beta)pdf(x) =  --------------------------------------            math.gamma(alpha) * beta ** alpha
17,random.gauss,"Normal distribution, also called the Gaussian distribution.  mu is the mean,and sigma is the standard deviation.  This is slightly faster thanthe normalvariate() function defined below.Multithreading note:  When two threads call this functionsimultaneously, it is possible that they will receive thesame return value.  This can be avoided in three ways.1) Have each thread use a different instance of the randomnumber generator. 2) Put locks around all calls. 3) Use theslower, but thread-safe normalvariate() function instead.Changed in version 3.11: mu and sigma now have default arguments."
18,random.lognormvariate,"Log normal distribution.  If you take the natural logarithm of thisdistribution, you’ll get a normal distribution with mean mu and standarddeviation sigma.  mu can have any value, and sigma must be greater thanzero."
19,random.normalvariate,"Normal distribution.  mu is the mean, and sigma is the standard deviation.Changed in version 3.11: mu and sigma now have default arguments."
20,random.vonmisesvariate,"mu is the mean angle, expressed in radians between 0 and 2*pi, and kappais the concentration parameter, which must be greater than or equal to zero.  Ifkappa is equal to zero, this distribution reduces to a uniform random angleover the range 0 to 2*pi."
21,random.paretovariate,Pareto distribution.  alpha is the shape parameter.
22,random.weibullvariate,Weibull distribution.  alpha is the scale parameter and beta is the shapeparameter.
23,random.Random,"Class that implements the default pseudo-random number generator used by therandom module.Deprecated since version 3.9: In the future, the seed must be one of the following types:NoneType, int, float, str,bytes, or bytearray."
24,random.SystemRandom,"Class that uses the os.urandom() function for generating random numbersfrom sources provided by the operating system. Not available on all systems.Does not rely on software state, and sequences are not reproducible. Accordingly,the seed() method has no effect and is ignored.The getstate() and setstate() methods raiseNotImplementedError if called."
